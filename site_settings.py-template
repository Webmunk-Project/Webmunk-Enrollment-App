"""
Django settings for webmunk_enrollment project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import base64
import datetime
import json
import random

from pathlib import Path

import arrow
import requests

from nacl.secret import SecretBox
from requests import Request

from django.utils import timezone

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'CHANGEME'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['CHANGEME']

ADMINS = [
    ('Chris Karr', 'chris@audacious-software.com')
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'quicksilver',
    'simple_backup',
    'enrollment',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'webmunk_enrollment.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webmunk_enrollment.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME':     'webmunk_enroll',
        'USER':     'webmunk_enroll',
        'PASSWORD': 'CHANGEME',
        'HOST': '127.0.0.1',
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
   'version': 1,
   'disable_existing_loggers': False,
    'handlers': {
        'null': {
        'level': 'DEBUG',
        'class': 'logging.NullHandler',
        },
    },
   'loggers': {
       'django.security.DisallowedHost': {
           'handlers': ['null'],
           'propagate': False,
       },
   }
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = Path.joinpath(BASE_DIR , 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = Path.joinpath(BASE_DIR , 'media')

SITE_URL = 'https://%s' % ALLOWED_HOSTS[0]

BITLY_ACCESS_CODE = 'CHANGEME'

ENROLLMENT_SECRET_KEY = 'CHANGEME'

PDK_EXTERNAL_CONTENT_SYMETRIC_KEY = 'CHANGEME'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTOMATED_EMAIL_FROM_ADDRESS = 'webmunk_study@hbs.edu'

QUICKSILVER_MAX_TASK_RUNTIME_SECONDS = 60 * 60 * 4

SIMPLE_BACKUP_KEY = 'CHANGEME'

SIMPLE_BACKUP_AWS_REGION = 'us-east-1'
SIMPLE_BACKUP_AWS_ACCESS_KEY_ID = 'CHANGEME'
SIMPLE_BACKUP_AWS_SECRET_ACCESS_KEY = 'CHANGEME'
SIMPLE_BACKUP_DESTINATIONS = (
    's3://webmunk-enroll-backup',
)

PDK_API_URL = 'https://pilot.webmunk.org/data/'
PDK_API_TOKEN = 'CHANGEME'

WEBMUNK_DATA_FOLLOWUP_DAYS = 28
WEBMUNK_REMINDER_DAYS_INTERVAL = 1

def WEBMUNK_UPDATE_TASKS(enrollment, ScheduledTask):
    # Implement custom task logic here.

    # Check if Amazon tasks exist and set up if needed...

    if enrollment.tasks.filter(slug__istartswith='upload-amazon-').count() < 2:
        metadata = '{}'

        if enrollment.metadata is not None and enrollment.metadata != '':
            metadata = enrollment.metadata

        metadata_dict = json.loads(metadata)

        if metadata_dict.get('amazon_start', None) is None:
            choices = ['01/01/2022', '01/01/2012']

            metadata_dict['amazon_start'] = random.choice(choices)

            enrollment.metadata = json.dumps(metadata_dict, indent=2)
            enrollment.save()

            metadata = enrollment.metadata

        tokens_clear = '%s:%s:%s:%s' % (enrollment.assigned_identifier, enrollment.assigned_identifier, 'amazon', metadata)

        box = SecretBox(base64.b64decode(PDK_EXTERNAL_CONTENT_SYMETRIC_KEY))

        enc_tokens = base64.b64encode(box.encrypt(tokens_clear.encode('utf-8'))).decode('utf-8')

        amazon_url  = 'https://pilot.webmunk.org/data/external/start'

        params = {
            'auto': enc_tokens
        }

        request = Request('GET', amazon_url, params=params).prepare()

        final_url = request.url

        requests.get(final_url)

        if enrollment.tasks.filter(slug='upload-amazon-start').count() == 0:
            ScheduledTask.objects.create(enrollment=enrollment, active=enrollment.enrolled, task='Upload your Amazon order history', slug='upload-amazon-start', url=final_url)

        if enrollment.tasks.filter(slug='upload-amazon-final').count() == 0:
            task_time = enrollment.enrolled + datetime.timedelta(days=WEBMUNK_DATA_FOLLOWUP_DAYS)

            ScheduledTask.objects.create(enrollment=enrollment, active=task_time, task='Update your Amazon order history', slug='upload-amazon-final', url=final_url)

    if enrollment.tasks.filter(slug='qualtrics-initial').count() == 0:
        final_url = 'https://hbs.qualtrics.com/jfe/form/CHANGEME?webmunk_id=%s' % enrollment.assigned_identifier

        ScheduledTask.objects.create(enrollment=enrollment, active=enrollment.enrolled - datetime.timedelta(seconds=60), task='Complete intake survey', slug='qualtrics-initial', url=final_url)

    # if enrollment.tasks.filter(slug='qualtrics-final').count() == 0:
    #    final_url = 'https://hbs.qualtrics.com/jfe/form/CHANGEME?webmunk_id=%s' % enrollment.assigned_identifier

    #    ScheduledTask.objects.create(enrollment=enrollment, active=enrollment.enrolled - datetime.timedelta(seconds=60), task='Complete final survey', slug='qualtrics-final', url=final_url)


def WEBMUNK_ASSIGN_RULES(found_enrollment, ExtensionRuleSet):
    if found_enrollment.rule_set is not None:
        return

    selected_rules = ExtensionRuleSet.objects.filter(is_active=True).order_by('?').first()

    if selected_rules is not None:
        found_enrollment.rule_set = selected_rules
        found_enrollment.save()


WEBMUNK_LOG_DOMAINS = (
    'anthropologie.com',
    'apple.com',
    'barnesandnoble.com',
    'bathandbodyworks.com',
    'bestbuy.com',
    'bhphotovideo.com',
    'birchbox.com',
    'bodybuilding.com',
    'boxed.com',
    'chewy.com',
    'costco.com',
    'cvs.com',
    'dillards.com',
    'dollargeneral.com',
    'ebay.com',
    'etsy.com',
    'forever21.com',
    'gamestop.com',
    'gap.com',
    'gnc.com',
    'hm.com',
    'homedepot.com',
    'hsn.com',
    'iherb.com',
    'ikea.com',
    'warbyparker.com',
    'johnlewis.com',
    'kohls.com',
    'kroger.com',
    'lego.com',
    'lordandtaylor.com',
    'nyxcosmetics.com',
    'lowes.com',
    'macys.com',
    'microsoft.com',
    'neimanmarcus.com',
    'newegg.com',
    'nike.com',
    'nordstrom.com',
    'overstock.com',
    'qvc.com',
    'rakuten.com',
    'riteaid.com',
    'samsclub.com',
    'sephora.com',
    'shop.app',
    'staples.com',
    'target.com',
    'vitaminshoppe.com',
    'ulta.com',
    'urbanoutfitters.com',
    'victoriassecret.com',
    'walgreens.com',
    'walmart.com',
    'wayfair.com',
    'yoox.com',
    'zappos.com',
    'zulily.com',
    'shop.app',
)

WEBMUNK_TARGETED_BRANDS = (
    'Amazon Basic Care',
    'Amazon Basics',
    'AmazonBasics',
    'Amazon Brand',
    'Amazon Collection',
    'Amazon Commercial',
    'AmazonCommercial',
    'Amazon Elements',
    'Amazon Essentials',
    'Featured from our brands',
    '206 Collective',
    'Amazing Baby',
    'Buttoned Down',
    'Cable Stitch',
    'Daily Ritual',
    'Goodthreads',
    'Isle Bay',
    'Lark & Ro',
    'Moon and Back by Hanna Andersson',
    'Mountain Falls',
    'P2N Peak Performance',
    'Pinzon',
    'Presto!',
    'Simple Joys by Carter\'s',
    'Solimo',
    'Spotted Zebra',
    # 'Fire TV', # CK Added
    # '10.Or',
    # '365 By Whole Foods Market',
    # '365 Every Day Value',
    # 'A For Awesome',
    # 'A Made For Kindle',
    # 'Afa',
    # 'Afa Authentic Food Artisan',
    # 'Afterthought',
    # 'Alexa',
    # 'Allegro',
    # 'Always Home',
    # 'Amazon Chime',
    # 'Amazon Dash',
    # 'Amazon Echo',
    # 'Amazon Edv',
    # 'Amazon English',
    # 'Amazon Game Studios',
    # 'Amazon Pharmacy',
    # 'Amazon Spheres',
    # 'Amazon Tap',
    # 'Amazon.Com',
    # 'Amazonfresh',
    # 'Arabella',
    # 'Arthur Harvey',
    # 'Azalea',
    # 'Be',
    # 'Belei',
    # 'Berry Chantilly',
    # 'Blink',
    # 'Bloom Street',
    # 'C/O',
    # 'Camp Moonlight',
    # 'Candy Island Confections',
    # 'Celebration Caffe',
    # 'Cheddar Chicks',
    # 'City Butcher',
    # 'Coastal Blue',
    # 'Common Casuals',
    # 'Common District',
    # 'Compass Road',
    # 'Cooper James',
    # 'Countdown To Zero',
    # 'Creative Galaxy',
    # 'D R',
    # 'Daisy Drive',
    # 'Dayana',
    # 'Denali',
    # 'Denim Bloom',
    # 'Due East Apparel',
    # 'Eero',
    # 'Fairfax',
    # 'Find.',
    # 'Fire',
    # 'Floodcraft Brewing Company',
    # 'Flying Ace',
    # 'Franklin & Freeman',
    # 'Fresh Fields',
    # 'Georgia Style W.B. Williams Brand Peach Salsa #1 Select',
    # 'Halo',
    # 'Happy Belly',
    # 'House Of Boho',
    # 'Hs House & Shields Clothing Company',
    # 'James & Erin',
    # 'Jump Club',
    # 'Kailee Athletics',
    # 'Kindle',
    # 'Kitzy',
    # 'League Of Outstanding Kids Look',
    # 'Lemon Label Paper Supply',
    # 'Lily Parker',
    # 'M X G',
    # 'Made For Amazon',
    # 'Madeline Kelly',
    # 'Mademark',
    # 'Mae',
    # 'Mia Noir',
    # 'Mint Lilac',
    # 'Movian',
    # 'Mr Beams',
    # 'Nature\'s Wonder',
    # 'Night Swim',
    # 'Ninja Squirrel',
    # 'Nod By Tuft&Needle',
    # 'Nupro',
    # 'Obsidian',
    # 'Ocean Blues',
    # 'One Wine',
    # 'Orchid Row',
    # 'Outerwear Index Co.',
    # 'Painted Heart',
    # 'Plumberry',
    # 'Ready When You Are',
    # 'Readyvolt',
    # 'Rebellion',
    # 'Replenish',
    # 'Ring',
    # 'Romantic Dreamers',
    # 'Scout + Ro',
    # 'Scuba Snacks',
    # 'Seeduction',
    # 'Sekoa',
    # 'Seriously Tasty',
    # 'Silly Apples',
    # 'Society New York',
    # 'Sprout Star',
    # 'Starkey Spring Water',
    # 'Strathwood',
    # 'Suite Alice',
    # 'The Establishment',
    # 'The Plus Project',
    # 'The Portland Plaid Co',
    # 'The Slumber Project',
    # 'Thirty Five Kent',
    # 'Toes In A Blanket',
    # 'Tovess',
    # 'Truity',
    # 'Vox',
    # 'Wag',
    # 'Weaczzy',
    # 'Wellspring',
    # 'Whole Foods',
    # 'Wickedly Prime',
    # 'Wonder Bound',
    # 'Wood Paper Company',
    # 'Yours Truly',
    # 'Zanie Kids',
    # 'Zappos',
    # 'Gabriella Rocha',
    # 'Bouquets',
    # 'Vigotti',
    # 'Type Z',
    # 'Lassen',
    # 'Fitzwell',
    # 'Rsvp',
    # 'Strathwood',
    # 'Care Of By Puma',
)

def WEBMUNK_UPDATE_ALL_RULE_SETS(payload):
    if ('log-elements' in payload['rules']) is False:
        payload['rules']['log-elements'] = []

    for domain in WEBMUNK_LOG_DOMAINS:
        domain_rule = {
            'filters': {
                'hostEquals': domain,
                'hostSuffix': '.%s' % domain
            },
            'load': ['title'],
            'leave': ['title']
        }

        payload['rules']['log-elements'].append(domain_rule)

    payload['rules']['rules'].insert(0, {
        'match': '.webmunk-targeted-brand:has(.webmunk-targeted-brand)',
        'remove-class': 'webmunk-targeted-brand'
    })

    for brand in WEBMUNK_TARGETED_BRANDS:
        brand_rule = {
            'add-class': 'webmunk-targeted-brand',
            'match': '.s-result-item:has(*:webmunkContainsInsensitive("%s"))' % brand
        }

        payload['rules']['rules'].insert(0, brand_rule)

#        brand_rule = {
#            'add-class': 'webmunk-targeted-brand',
#            'match': '.s-result-item:has(.a-text-normal:contains("%s"))' % brand
#        }
#
#        payload['rules']['rules'].insert(0, brand_rule)
#
#        brand_rule = {
#            'add-class': 'webmunk-targeted-brand',
#            'match': '.s-result-item:has(.a-color-base:contains("%s"))' % brand
#        }
#
#        payload['rules']['rules'].insert(0, brand_rule)
#
#        brand_rule = {
#            'add-class': 'webmunk-targeted-brand',
#            'match': '.s-result-item:has(.s-light-weight-text:contains("%s"))' % brand
#        }
#
#        payload['rules']['rules'].insert(0, brand_rule)

        brand_rule = {
            'add-class': 'webmunk-targeted-brand',
            'match': '.s-inner-result-item:has(*:webmunkContainsInsensitive("%s"))' % brand
        }

        payload['rules']['rules'].insert(0, brand_rule)

#        brand_rule = {
#            'add-class': 'webmunk-targeted-brand',
#            'match': '.s-inner-result-item:has(.a-text-normal:contains("%s"))' % brand
#        }
#
#        payload['rules']['rules'].insert(0, brand_rule)
#
#        brand_rule = {
#            'add-class': 'webmunk-targeted-brand',
#            'match': '.s-inner-result-item:has(.a-color-base:contains("%s"))' % brand
#        }
#
#        payload['rules']['rules'].insert(0, brand_rule)
#
#        brand_rule = {
#            'add-class': 'webmunk-targeted-brand',
#            'match': '.s-inner-result-item:has(.s-light-weight-text:contains("%s"))' % brand
#        }
#
#        payload['rules']['rules'].insert(0, brand_rule)


def WEBMUNK_CHECK_TASK_COMPLETE(task):
    if task.slug in ('upload-amazon-start', 'upload-amazon-final'):
        pdk_ed_url  = 'https://pilot.webmunk.org/data/external/uploads/%s.json' % task.enrollment.assigned_identifier

        amazon_divider = task.enrollment.enrolled + datetime.timedelta(days=WEBMUNK_DATA_FOLLOWUP_DAYS)

        try:
            response = requests.get(pdk_ed_url)

            if response.status_code == 200:
                uploaded_items = response.json()

                for item in uploaded_items:
                    if item['source'] == 'amazon':
                        item_upload = arrow.get(item['uploaded']).datetime

                        if task.slug == 'upload-amazon-start' and item_upload < amazon_divider:
                            return True

                        if task.slug == 'upload-amazon-final' and item_upload > amazon_divider:
                            task.completed = item_upload

                            incomplete_amazon = task.enrollment.tasks.filter(slug='upload-amazon-start', completed=None).first()

                            if incomplete_amazon is not None:
                                incomplete_amazon.completed = timezone.now()

                                metadata = {}

                                if incomplete_amazon.metadata is not None and incomplete_amazon.metadata != '':
                                    metadata = json.loads(incomplete_amazon.metadata)

                                    metadata['summary'] = 'Did not upload first history file'

                                    incomplete_amazon.metadata = json.dumps(metadata, indent=2)

                                    incomplete_amazon.save()

                            return True
            else:
                print('RESP[%s]: %s -- %d' % (task.enrollment.assigned_identifier, pdk_ed_url, response.status_code))
        except requests.exceptions.ConnectionError:
            print('RESP[%s]: %s -- Unable to connect' % (task.enrollment.assigned_identifier, pdk_ed_url))

    return False

WEBMUNK_QUALTRICS_API_TOKEN = 'CHANGEME'
WEBMUNK_QUALTRICS_BASE_URL = 'https://hbs.ca1.qualtrics.com'
WEBMUNK_QUALTRICS_SURVEY_IDS = (
    ('SV_3W2xxjS39Wp33FQ', 'qualtrics-initial', 'https://hbs.ca1.qualtrics.com', 'CHANGEME'),
    ('SV_6mObnu4EcTzvE0K', 'qualtrics-final', 'https://hbs.ca1.qualtrics.com', 'CHANGEME'),
)

WEBMUNK_MONTIORING_URLS = (
    'https://www.amazon.com/s?k=usb+cables',
    'https://www.amazon.com/s?k=batteries',
    'https://www.amazon.com/s?k=button+down+shirt',
    'https://www.amazon.com/s?k=shorts',
    'https://www.amazon.com/s?k=paper+towels',
    'https://www.amazon.com/s?k=surge+protector',
    'https://www.amazon.com/s?k=zoom+light',
    'https://www.amazon.com/s?k=towels',
    'https://www.amazon.com/s?k=baby+clothes',
    'https://www.amazon.com/s?k=diapers',
    'https://www.amazon.com/s?k=dog+food',
    'https://www.amazon.com/s?k=detergent',
    'https://www.amazon.com/s?k=zyrtec',
    'https://www.amazon.com/s?k=allegra',
    'https://www.amazon.com/s?k=tv+stand',
    'https://www.amazon.com/s?k=nintendo+switch',
    'https://www.amazon.com/s?k=laptop',
    'https://www.amazon.com/s?k=airpods',
    'https://www.amazon.com/s?k=headphones',
    'https://www.amazon.com/s?k=wireless+earbuds',
    'https://www.amazon.com/s?k=ipad',
    'https://www.amazon.com/s?k=game+of+thrones',
    'https://www.amazon.com/s?k=fire+stick',
    'https://www.amazon.com/s?k=ssd',
    'https://www.amazon.com/s?k=fitbit',
    'https://www.amazon.com/s?k=kindle',
    'https://www.amazon.com/s?k=tv',
    'https://www.amazon.com/s?k=air+fryer',
    'https://www.amazon.com/s?k=bluetooth+headphones',
    'https://www.amazon.com/s?k=roku',
    'https://www.amazon.com/s?k=toilet+paper',
    'https://www.amazon.com/s?k=external+hard+drive',
    'https://www.amazon.com/s?k=tablet',
    'https://www.amazon.com/s?k=instant+pot',
    'https://www.amazon.com/s?k=micro+sd+card',
)
